//-- ./proto/categories.proto

// Categories service protocol buffer definitions for the Personal Ledger backend.
// This file defines the gRPC API for managing financial categories, including CRUD,
// batch operations, filtering, and activation/deactivation.

syntax = "proto3";

package personal_ledger;

import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";

// Enum representing the type of financial category.
// Used to classify categories as assets, liabilities, etc.
enum CategoryTypes {
  // Default value. Should not be used.
  CATEGORY_TYPE_UNSPECIFIED = 0;

  // Asset category (e.g., cash, property)
  ASSET = 1;

  // Equity category (e.g., owner's equity)
  EQUITY = 2;

  // Expense category (e.g., groceries, rent)
  EXPENSE = 3;

  // Income category (e.g., salary, dividends)
  INCOME = 4;

  // Liability category (e.g., loans, credit cards)
  LIABILITY = 5;
}


// Represents a financial category, such as an expense or asset type.
// Used for organizing transactions and accounts.
message Category {
  // Unique identifier (UUID) for the category.
  string id = 1;

  // Short unique code for the category (e.g., "GROCERY").
  string code = 2;

  // Human-readable name of the category.
  string name = 3;

  // Optional description of the category's purpose.
  optional string description = 4;

  // Optional URL-friendly slug for the category (e.g., "groceries").
  optional string url_slug = 5;

  // The type of category (asset, expense, etc.).
  CategoryTypes category_type = 6;

  // Optional HEX color code for UI display (e.g., "#FF0000").
  optional string color = 7;

  // Optional icon name or URL for UI display.
  optional string icon = 8;

  // Whether the category is active and available for use.
  bool is_active = 9;

  // Timestamp when the category was created (UTC).
  google.protobuf.Timestamp created_on = 10;

  // Timestamp when the category was last updated (UTC).
  google.protobuf.Timestamp updated_on = 11;
}


// Request to create a new category.
message CategoryCreateRequest {
  // The category to create (id is ignored).
  Category category = 1;
}


// Response containing the created category.
message CategoryCreateResponse {
  Category category = 1;
}


// Request to fetch a category by its unique ID.
message CategoryGetRequest {
  string id = 1;
}


// Response containing the requested category.
message CategoryGetResponse {
  Category category = 1;
}


// Request to fetch a category by its unique code.
message CategoryGetByCodeRequest {
  string code = 1;
}


// Response containing the requested category by code.
message CategoryGetByCodeResponse {
  Category category = 1;
}


// Request to fetch a category by its URL slug.
message CategoryGetBySlugRequest {
  string url_slug = 1;
}


// Response containing the requested category by slug.
message CategoryGetBySlugResponse {
  Category category = 1;
}


// Request to list categories with optional pagination, filtering, and sorting.
message CategoriesListRequest {
  // The number of categories to skip (for pagination).
  int32 offset = 1;

  // The maximum number of categories to return.
  int32 limit = 2;

  // Optional filter by category type.
  optional CategoryTypes category_type = 3;

  // Optional filter by active status.
  optional bool is_active = 4;

  // Optional field to sort by (e.g., "created_on").
  optional string sort_by = 5;

  // Whether to sort in descending order.
  optional bool sort_desc = 6;
}


// Response containing a list of categories and pagination info.
message CategoriesListResponse {
  // The list of categories matching the request.
  repeated Category categories = 1;

  // Total number of categories matching the filter (for pagination).
  int32 total_count = 2;

  // The offset used in the request.
  int32 offset = 3;

  // The limit used in the request.
  int32 limit = 4;
}


// Request to update an existing category.
message CategoryUpdateRequest {
  // The ID of the category to update.
  string id = 1;

  // The new category data (id is ignored).
  Category category = 2;

  // Optional field mask to specify which fields to update.
  google.protobuf.FieldMask update_mask = 3;
}


// Response containing the updated category.
message CategoryUpdateResponse {
  Category category = 1;
}


// Request to create multiple categories in a batch.
message CategoriesCreateBatchRequest {
  // The categories to create (ids are ignored).
  repeated Category categories = 1;
}


// Response containing the created categories and count.
message CategoriesCreateBatchResponse {
  // The created categories.
  repeated Category categories = 1;

  // The number of categories created.
  int32 created_count = 2;
}


// Request to delete a category by ID.
message CategoryDeleteRequest {
  string id = 1;
}


// Response indicating how many rows were deleted (should be 0 or 1).
message CategoryDeleteResponse {
  int32 rows_deleted = 1;
}


// Request to delete multiple categories by their IDs.
message CategoriesDeleteBatchRequest {
  repeated string ids = 1;
}


// Response indicating how many categories were deleted in the batch.
message CategoriesDeleteBatchResponse {
  int32 rows_deleted = 1;
}


// Request to activate a category (set is_active = true).
message CategoryActivateRequest {
  string id = 1;
}


// Response containing the activated category.
message CategoryActivateResponse {
  Category category = 1;
}


// Request to deactivate a category (set is_active = false).
message CategoryDeactivateRequest {
  string id = 1;
}


// Response containing the deactivated category.
message CategoryDeactivateResponse {
  Category category = 1;
}


// gRPC service for managing financial categories.
// Provides CRUD, batch, lookup, filtering, and activation operations.
service CategoriesService {
  // Create a new category.
  rpc CategoryCreate(CategoryCreateRequest) returns (CategoryCreateResponse);

  // Create multiple categories in a single request.
  rpc CategoriesCreateBatch(CategoriesCreateBatchRequest) returns (CategoriesCreateBatchResponse);

  // Get a category by its unique ID.
  rpc CategoryGet(CategoryGetRequest) returns (CategoryGetResponse);

  // Get a category by its unique code.
  rpc CategoryGetByCode(CategoryGetByCodeRequest) returns (CategoryGetByCodeResponse);

  // Get a category by its URL slug.
  rpc CategoryGetBySlug(CategoryGetBySlugRequest) returns (CategoryGetBySlugResponse);

  // List categories with optional filtering, pagination, and sorting.
  rpc CategoriesList(CategoriesListRequest) returns (CategoriesListResponse);

  // Update an existing category (partial updates supported).
  rpc CategoryUpdate(CategoryUpdateRequest) returns (CategoryUpdateResponse);

  // Delete a category by ID.
  rpc CategoryDelete(CategoryDeleteRequest) returns (CategoryDeleteResponse);

  // Delete multiple categories by their IDs.
  rpc CategoriesDeleteBatch(CategoriesDeleteBatchRequest) returns (CategoriesDeleteBatchResponse);

  // Activate a category (set is_active = true).
  rpc CategoryActivate(CategoryActivateRequest) returns (CategoryActivateResponse);

  // Deactivate a category (set is_active = false).
  rpc CategoryDeactivate(CategoryDeactivateRequest) returns (CategoryDeactivateResponse);
}
